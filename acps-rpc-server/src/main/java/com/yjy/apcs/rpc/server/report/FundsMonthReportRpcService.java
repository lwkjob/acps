/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yjy.apcs.rpc.server.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-06")
public class FundsMonthReportRpcService {

  public interface Iface {

    public TFundsMonthPaginationVo findFundsMonthPagination(TRequestFundsMonthVo requestFundsMonthVo) throws org.apache.thrift.TException;

    public TFundsMonthPaginationVo findFundsMonthById(TRequestFundsMonthByIdVo requestFundsMonthByIdVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findFundsMonthPagination(TRequestFundsMonthVo requestFundsMonthVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findFundsMonthById(TRequestFundsMonthByIdVo requestFundsMonthByIdVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TFundsMonthPaginationVo findFundsMonthPagination(TRequestFundsMonthVo requestFundsMonthVo) throws org.apache.thrift.TException
    {
      send_findFundsMonthPagination(requestFundsMonthVo);
      return recv_findFundsMonthPagination();
    }

    public void send_findFundsMonthPagination(TRequestFundsMonthVo requestFundsMonthVo) throws org.apache.thrift.TException
    {
      findFundsMonthPagination_args args = new findFundsMonthPagination_args();
      args.setRequestFundsMonthVo(requestFundsMonthVo);
      sendBase("findFundsMonthPagination", args);
    }

    public TFundsMonthPaginationVo recv_findFundsMonthPagination() throws org.apache.thrift.TException
    {
      findFundsMonthPagination_result result = new findFundsMonthPagination_result();
      receiveBase(result, "findFundsMonthPagination");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findFundsMonthPagination failed: unknown result");
    }

    public TFundsMonthPaginationVo findFundsMonthById(TRequestFundsMonthByIdVo requestFundsMonthByIdVo) throws org.apache.thrift.TException
    {
      send_findFundsMonthById(requestFundsMonthByIdVo);
      return recv_findFundsMonthById();
    }

    public void send_findFundsMonthById(TRequestFundsMonthByIdVo requestFundsMonthByIdVo) throws org.apache.thrift.TException
    {
      findFundsMonthById_args args = new findFundsMonthById_args();
      args.setRequestFundsMonthByIdVo(requestFundsMonthByIdVo);
      sendBase("findFundsMonthById", args);
    }

    public TFundsMonthPaginationVo recv_findFundsMonthById() throws org.apache.thrift.TException
    {
      findFundsMonthById_result result = new findFundsMonthById_result();
      receiveBase(result, "findFundsMonthById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findFundsMonthById failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findFundsMonthPagination(TRequestFundsMonthVo requestFundsMonthVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findFundsMonthPagination_call method_call = new findFundsMonthPagination_call(requestFundsMonthVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findFundsMonthPagination_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TRequestFundsMonthVo requestFundsMonthVo;
      public findFundsMonthPagination_call(TRequestFundsMonthVo requestFundsMonthVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestFundsMonthVo = requestFundsMonthVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findFundsMonthPagination", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findFundsMonthPagination_args args = new findFundsMonthPagination_args();
        args.setRequestFundsMonthVo(requestFundsMonthVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TFundsMonthPaginationVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findFundsMonthPagination();
      }
    }

    public void findFundsMonthById(TRequestFundsMonthByIdVo requestFundsMonthByIdVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findFundsMonthById_call method_call = new findFundsMonthById_call(requestFundsMonthByIdVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findFundsMonthById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TRequestFundsMonthByIdVo requestFundsMonthByIdVo;
      public findFundsMonthById_call(TRequestFundsMonthByIdVo requestFundsMonthByIdVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestFundsMonthByIdVo = requestFundsMonthByIdVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findFundsMonthById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findFundsMonthById_args args = new findFundsMonthById_args();
        args.setRequestFundsMonthByIdVo(requestFundsMonthByIdVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TFundsMonthPaginationVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findFundsMonthById();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findFundsMonthPagination", new findFundsMonthPagination());
      processMap.put("findFundsMonthById", new findFundsMonthById());
      return processMap;
    }

    public static class findFundsMonthPagination<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findFundsMonthPagination_args> {
      public findFundsMonthPagination() {
        super("findFundsMonthPagination");
      }

      public findFundsMonthPagination_args getEmptyArgsInstance() {
        return new findFundsMonthPagination_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findFundsMonthPagination_result getResult(I iface, findFundsMonthPagination_args args) throws org.apache.thrift.TException {
        findFundsMonthPagination_result result = new findFundsMonthPagination_result();
        result.success = iface.findFundsMonthPagination(args.requestFundsMonthVo);
        return result;
      }
    }

    public static class findFundsMonthById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findFundsMonthById_args> {
      public findFundsMonthById() {
        super("findFundsMonthById");
      }

      public findFundsMonthById_args getEmptyArgsInstance() {
        return new findFundsMonthById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findFundsMonthById_result getResult(I iface, findFundsMonthById_args args) throws org.apache.thrift.TException {
        findFundsMonthById_result result = new findFundsMonthById_result();
        result.success = iface.findFundsMonthById(args.requestFundsMonthByIdVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findFundsMonthPagination", new findFundsMonthPagination());
      processMap.put("findFundsMonthById", new findFundsMonthById());
      return processMap;
    }

    public static class findFundsMonthPagination<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findFundsMonthPagination_args, TFundsMonthPaginationVo> {
      public findFundsMonthPagination() {
        super("findFundsMonthPagination");
      }

      public findFundsMonthPagination_args getEmptyArgsInstance() {
        return new findFundsMonthPagination_args();
      }

      public AsyncMethodCallback<TFundsMonthPaginationVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TFundsMonthPaginationVo>() { 
          public void onComplete(TFundsMonthPaginationVo o) {
            findFundsMonthPagination_result result = new findFundsMonthPagination_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findFundsMonthPagination_result result = new findFundsMonthPagination_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findFundsMonthPagination_args args, org.apache.thrift.async.AsyncMethodCallback<TFundsMonthPaginationVo> resultHandler) throws TException {
        iface.findFundsMonthPagination(args.requestFundsMonthVo,resultHandler);
      }
    }

    public static class findFundsMonthById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findFundsMonthById_args, TFundsMonthPaginationVo> {
      public findFundsMonthById() {
        super("findFundsMonthById");
      }

      public findFundsMonthById_args getEmptyArgsInstance() {
        return new findFundsMonthById_args();
      }

      public AsyncMethodCallback<TFundsMonthPaginationVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TFundsMonthPaginationVo>() { 
          public void onComplete(TFundsMonthPaginationVo o) {
            findFundsMonthById_result result = new findFundsMonthById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findFundsMonthById_result result = new findFundsMonthById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findFundsMonthById_args args, org.apache.thrift.async.AsyncMethodCallback<TFundsMonthPaginationVo> resultHandler) throws TException {
        iface.findFundsMonthById(args.requestFundsMonthByIdVo,resultHandler);
      }
    }

  }

  public static class findFundsMonthPagination_args implements org.apache.thrift.TBase<findFundsMonthPagination_args, findFundsMonthPagination_args._Fields>, java.io.Serializable, Cloneable, Comparable<findFundsMonthPagination_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFundsMonthPagination_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FUNDS_MONTH_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestFundsMonthVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFundsMonthPagination_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFundsMonthPagination_argsTupleSchemeFactory());
    }

    public TRequestFundsMonthVo requestFundsMonthVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_FUNDS_MONTH_VO((short)1, "requestFundsMonthVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_FUNDS_MONTH_VO
            return REQUEST_FUNDS_MONTH_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_FUNDS_MONTH_VO, new org.apache.thrift.meta_data.FieldMetaData("requestFundsMonthVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRequestFundsMonthVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFundsMonthPagination_args.class, metaDataMap);
    }

    public findFundsMonthPagination_args() {
    }

    public findFundsMonthPagination_args(
      TRequestFundsMonthVo requestFundsMonthVo)
    {
      this();
      this.requestFundsMonthVo = requestFundsMonthVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFundsMonthPagination_args(findFundsMonthPagination_args other) {
      if (other.isSetRequestFundsMonthVo()) {
        this.requestFundsMonthVo = new TRequestFundsMonthVo(other.requestFundsMonthVo);
      }
    }

    public findFundsMonthPagination_args deepCopy() {
      return new findFundsMonthPagination_args(this);
    }

    @Override
    public void clear() {
      this.requestFundsMonthVo = null;
    }

    public TRequestFundsMonthVo getRequestFundsMonthVo() {
      return this.requestFundsMonthVo;
    }

    public findFundsMonthPagination_args setRequestFundsMonthVo(TRequestFundsMonthVo requestFundsMonthVo) {
      this.requestFundsMonthVo = requestFundsMonthVo;
      return this;
    }

    public void unsetRequestFundsMonthVo() {
      this.requestFundsMonthVo = null;
    }

    /** Returns true if field requestFundsMonthVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestFundsMonthVo() {
      return this.requestFundsMonthVo != null;
    }

    public void setRequestFundsMonthVoIsSet(boolean value) {
      if (!value) {
        this.requestFundsMonthVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_FUNDS_MONTH_VO:
        if (value == null) {
          unsetRequestFundsMonthVo();
        } else {
          setRequestFundsMonthVo((TRequestFundsMonthVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_FUNDS_MONTH_VO:
        return getRequestFundsMonthVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_FUNDS_MONTH_VO:
        return isSetRequestFundsMonthVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFundsMonthPagination_args)
        return this.equals((findFundsMonthPagination_args)that);
      return false;
    }

    public boolean equals(findFundsMonthPagination_args that) {
      if (that == null)
        return false;

      boolean this_present_requestFundsMonthVo = true && this.isSetRequestFundsMonthVo();
      boolean that_present_requestFundsMonthVo = true && that.isSetRequestFundsMonthVo();
      if (this_present_requestFundsMonthVo || that_present_requestFundsMonthVo) {
        if (!(this_present_requestFundsMonthVo && that_present_requestFundsMonthVo))
          return false;
        if (!this.requestFundsMonthVo.equals(that.requestFundsMonthVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestFundsMonthVo = true && (isSetRequestFundsMonthVo());
      list.add(present_requestFundsMonthVo);
      if (present_requestFundsMonthVo)
        list.add(requestFundsMonthVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findFundsMonthPagination_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestFundsMonthVo()).compareTo(other.isSetRequestFundsMonthVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestFundsMonthVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestFundsMonthVo, other.requestFundsMonthVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFundsMonthPagination_args(");
      boolean first = true;

      sb.append("requestFundsMonthVo:");
      if (this.requestFundsMonthVo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestFundsMonthVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (requestFundsMonthVo != null) {
        requestFundsMonthVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFundsMonthPagination_argsStandardSchemeFactory implements SchemeFactory {
      public findFundsMonthPagination_argsStandardScheme getScheme() {
        return new findFundsMonthPagination_argsStandardScheme();
      }
    }

    private static class findFundsMonthPagination_argsStandardScheme extends StandardScheme<findFundsMonthPagination_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFundsMonthPagination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_FUNDS_MONTH_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestFundsMonthVo = new TRequestFundsMonthVo();
                struct.requestFundsMonthVo.read(iprot);
                struct.setRequestFundsMonthVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFundsMonthPagination_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestFundsMonthVo != null) {
          oprot.writeFieldBegin(REQUEST_FUNDS_MONTH_VO_FIELD_DESC);
          struct.requestFundsMonthVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFundsMonthPagination_argsTupleSchemeFactory implements SchemeFactory {
      public findFundsMonthPagination_argsTupleScheme getScheme() {
        return new findFundsMonthPagination_argsTupleScheme();
      }
    }

    private static class findFundsMonthPagination_argsTupleScheme extends TupleScheme<findFundsMonthPagination_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFundsMonthPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestFundsMonthVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestFundsMonthVo()) {
          struct.requestFundsMonthVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFundsMonthPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestFundsMonthVo = new TRequestFundsMonthVo();
          struct.requestFundsMonthVo.read(iprot);
          struct.setRequestFundsMonthVoIsSet(true);
        }
      }
    }

  }

  public static class findFundsMonthPagination_result implements org.apache.thrift.TBase<findFundsMonthPagination_result, findFundsMonthPagination_result._Fields>, java.io.Serializable, Cloneable, Comparable<findFundsMonthPagination_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFundsMonthPagination_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFundsMonthPagination_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFundsMonthPagination_resultTupleSchemeFactory());
    }

    public TFundsMonthPaginationVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFundsMonthPaginationVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFundsMonthPagination_result.class, metaDataMap);
    }

    public findFundsMonthPagination_result() {
    }

    public findFundsMonthPagination_result(
      TFundsMonthPaginationVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFundsMonthPagination_result(findFundsMonthPagination_result other) {
      if (other.isSetSuccess()) {
        this.success = new TFundsMonthPaginationVo(other.success);
      }
    }

    public findFundsMonthPagination_result deepCopy() {
      return new findFundsMonthPagination_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TFundsMonthPaginationVo getSuccess() {
      return this.success;
    }

    public findFundsMonthPagination_result setSuccess(TFundsMonthPaginationVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TFundsMonthPaginationVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFundsMonthPagination_result)
        return this.equals((findFundsMonthPagination_result)that);
      return false;
    }

    public boolean equals(findFundsMonthPagination_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findFundsMonthPagination_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFundsMonthPagination_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFundsMonthPagination_resultStandardSchemeFactory implements SchemeFactory {
      public findFundsMonthPagination_resultStandardScheme getScheme() {
        return new findFundsMonthPagination_resultStandardScheme();
      }
    }

    private static class findFundsMonthPagination_resultStandardScheme extends StandardScheme<findFundsMonthPagination_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFundsMonthPagination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TFundsMonthPaginationVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFundsMonthPagination_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFundsMonthPagination_resultTupleSchemeFactory implements SchemeFactory {
      public findFundsMonthPagination_resultTupleScheme getScheme() {
        return new findFundsMonthPagination_resultTupleScheme();
      }
    }

    private static class findFundsMonthPagination_resultTupleScheme extends TupleScheme<findFundsMonthPagination_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFundsMonthPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFundsMonthPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TFundsMonthPaginationVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findFundsMonthById_args implements org.apache.thrift.TBase<findFundsMonthById_args, findFundsMonthById_args._Fields>, java.io.Serializable, Cloneable, Comparable<findFundsMonthById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFundsMonthById_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FUNDS_MONTH_BY_ID_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestFundsMonthByIdVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFundsMonthById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFundsMonthById_argsTupleSchemeFactory());
    }

    public TRequestFundsMonthByIdVo requestFundsMonthByIdVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_FUNDS_MONTH_BY_ID_VO((short)1, "requestFundsMonthByIdVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_FUNDS_MONTH_BY_ID_VO
            return REQUEST_FUNDS_MONTH_BY_ID_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_FUNDS_MONTH_BY_ID_VO, new org.apache.thrift.meta_data.FieldMetaData("requestFundsMonthByIdVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRequestFundsMonthByIdVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFundsMonthById_args.class, metaDataMap);
    }

    public findFundsMonthById_args() {
    }

    public findFundsMonthById_args(
      TRequestFundsMonthByIdVo requestFundsMonthByIdVo)
    {
      this();
      this.requestFundsMonthByIdVo = requestFundsMonthByIdVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFundsMonthById_args(findFundsMonthById_args other) {
      if (other.isSetRequestFundsMonthByIdVo()) {
        this.requestFundsMonthByIdVo = new TRequestFundsMonthByIdVo(other.requestFundsMonthByIdVo);
      }
    }

    public findFundsMonthById_args deepCopy() {
      return new findFundsMonthById_args(this);
    }

    @Override
    public void clear() {
      this.requestFundsMonthByIdVo = null;
    }

    public TRequestFundsMonthByIdVo getRequestFundsMonthByIdVo() {
      return this.requestFundsMonthByIdVo;
    }

    public findFundsMonthById_args setRequestFundsMonthByIdVo(TRequestFundsMonthByIdVo requestFundsMonthByIdVo) {
      this.requestFundsMonthByIdVo = requestFundsMonthByIdVo;
      return this;
    }

    public void unsetRequestFundsMonthByIdVo() {
      this.requestFundsMonthByIdVo = null;
    }

    /** Returns true if field requestFundsMonthByIdVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestFundsMonthByIdVo() {
      return this.requestFundsMonthByIdVo != null;
    }

    public void setRequestFundsMonthByIdVoIsSet(boolean value) {
      if (!value) {
        this.requestFundsMonthByIdVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_FUNDS_MONTH_BY_ID_VO:
        if (value == null) {
          unsetRequestFundsMonthByIdVo();
        } else {
          setRequestFundsMonthByIdVo((TRequestFundsMonthByIdVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_FUNDS_MONTH_BY_ID_VO:
        return getRequestFundsMonthByIdVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_FUNDS_MONTH_BY_ID_VO:
        return isSetRequestFundsMonthByIdVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFundsMonthById_args)
        return this.equals((findFundsMonthById_args)that);
      return false;
    }

    public boolean equals(findFundsMonthById_args that) {
      if (that == null)
        return false;

      boolean this_present_requestFundsMonthByIdVo = true && this.isSetRequestFundsMonthByIdVo();
      boolean that_present_requestFundsMonthByIdVo = true && that.isSetRequestFundsMonthByIdVo();
      if (this_present_requestFundsMonthByIdVo || that_present_requestFundsMonthByIdVo) {
        if (!(this_present_requestFundsMonthByIdVo && that_present_requestFundsMonthByIdVo))
          return false;
        if (!this.requestFundsMonthByIdVo.equals(that.requestFundsMonthByIdVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestFundsMonthByIdVo = true && (isSetRequestFundsMonthByIdVo());
      list.add(present_requestFundsMonthByIdVo);
      if (present_requestFundsMonthByIdVo)
        list.add(requestFundsMonthByIdVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findFundsMonthById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestFundsMonthByIdVo()).compareTo(other.isSetRequestFundsMonthByIdVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestFundsMonthByIdVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestFundsMonthByIdVo, other.requestFundsMonthByIdVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFundsMonthById_args(");
      boolean first = true;

      sb.append("requestFundsMonthByIdVo:");
      if (this.requestFundsMonthByIdVo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestFundsMonthByIdVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (requestFundsMonthByIdVo != null) {
        requestFundsMonthByIdVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFundsMonthById_argsStandardSchemeFactory implements SchemeFactory {
      public findFundsMonthById_argsStandardScheme getScheme() {
        return new findFundsMonthById_argsStandardScheme();
      }
    }

    private static class findFundsMonthById_argsStandardScheme extends StandardScheme<findFundsMonthById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFundsMonthById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_FUNDS_MONTH_BY_ID_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestFundsMonthByIdVo = new TRequestFundsMonthByIdVo();
                struct.requestFundsMonthByIdVo.read(iprot);
                struct.setRequestFundsMonthByIdVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFundsMonthById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestFundsMonthByIdVo != null) {
          oprot.writeFieldBegin(REQUEST_FUNDS_MONTH_BY_ID_VO_FIELD_DESC);
          struct.requestFundsMonthByIdVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFundsMonthById_argsTupleSchemeFactory implements SchemeFactory {
      public findFundsMonthById_argsTupleScheme getScheme() {
        return new findFundsMonthById_argsTupleScheme();
      }
    }

    private static class findFundsMonthById_argsTupleScheme extends TupleScheme<findFundsMonthById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFundsMonthById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestFundsMonthByIdVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestFundsMonthByIdVo()) {
          struct.requestFundsMonthByIdVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFundsMonthById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestFundsMonthByIdVo = new TRequestFundsMonthByIdVo();
          struct.requestFundsMonthByIdVo.read(iprot);
          struct.setRequestFundsMonthByIdVoIsSet(true);
        }
      }
    }

  }

  public static class findFundsMonthById_result implements org.apache.thrift.TBase<findFundsMonthById_result, findFundsMonthById_result._Fields>, java.io.Serializable, Cloneable, Comparable<findFundsMonthById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findFundsMonthById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findFundsMonthById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findFundsMonthById_resultTupleSchemeFactory());
    }

    public TFundsMonthPaginationVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFundsMonthPaginationVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findFundsMonthById_result.class, metaDataMap);
    }

    public findFundsMonthById_result() {
    }

    public findFundsMonthById_result(
      TFundsMonthPaginationVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findFundsMonthById_result(findFundsMonthById_result other) {
      if (other.isSetSuccess()) {
        this.success = new TFundsMonthPaginationVo(other.success);
      }
    }

    public findFundsMonthById_result deepCopy() {
      return new findFundsMonthById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TFundsMonthPaginationVo getSuccess() {
      return this.success;
    }

    public findFundsMonthById_result setSuccess(TFundsMonthPaginationVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TFundsMonthPaginationVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findFundsMonthById_result)
        return this.equals((findFundsMonthById_result)that);
      return false;
    }

    public boolean equals(findFundsMonthById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findFundsMonthById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findFundsMonthById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findFundsMonthById_resultStandardSchemeFactory implements SchemeFactory {
      public findFundsMonthById_resultStandardScheme getScheme() {
        return new findFundsMonthById_resultStandardScheme();
      }
    }

    private static class findFundsMonthById_resultStandardScheme extends StandardScheme<findFundsMonthById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findFundsMonthById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TFundsMonthPaginationVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findFundsMonthById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findFundsMonthById_resultTupleSchemeFactory implements SchemeFactory {
      public findFundsMonthById_resultTupleScheme getScheme() {
        return new findFundsMonthById_resultTupleScheme();
      }
    }

    private static class findFundsMonthById_resultTupleScheme extends TupleScheme<findFundsMonthById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findFundsMonthById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findFundsMonthById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TFundsMonthPaginationVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
