/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yjy.apcs.rpc.server.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-06")
public class TRequestGoodsMonthByIdVo implements org.apache.thrift.TBase<TRequestGoodsMonthByIdVo, TRequestGoodsMonthByIdVo._Fields>, java.io.Serializable, Cloneable, Comparable<TRequestGoodsMonthByIdVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRequestGoodsMonthByIdVo");

  private static final org.apache.thrift.protocol.TField SALERID_FIELD_DESC = new org.apache.thrift.protocol.TField("salerid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("Id", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TRequestGoodsMonthByIdVoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TRequestGoodsMonthByIdVoTupleSchemeFactory());
  }

  public int salerid; // optional
  public int Id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SALERID((short)1, "salerid"),
    ID((short)2, "Id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SALERID
          return SALERID;
        case 2: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SALERID_ISSET_ID = 0;
  private static final int __ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SALERID,_Fields.ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SALERID, new org.apache.thrift.meta_data.FieldMetaData("salerid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("Id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRequestGoodsMonthByIdVo.class, metaDataMap);
  }

  public TRequestGoodsMonthByIdVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRequestGoodsMonthByIdVo(TRequestGoodsMonthByIdVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.salerid = other.salerid;
    this.Id = other.Id;
  }

  public TRequestGoodsMonthByIdVo deepCopy() {
    return new TRequestGoodsMonthByIdVo(this);
  }

  @Override
  public void clear() {
    setSaleridIsSet(false);
    this.salerid = 0;
    setIdIsSet(false);
    this.Id = 0;
  }

  public int getSalerid() {
    return this.salerid;
  }

  public TRequestGoodsMonthByIdVo setSalerid(int salerid) {
    this.salerid = salerid;
    setSaleridIsSet(true);
    return this;
  }

  public void unsetSalerid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALERID_ISSET_ID);
  }

  /** Returns true if field salerid is set (has been assigned a value) and false otherwise */
  public boolean isSetSalerid() {
    return EncodingUtils.testBit(__isset_bitfield, __SALERID_ISSET_ID);
  }

  public void setSaleridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALERID_ISSET_ID, value);
  }

  public int getId() {
    return this.Id;
  }

  public TRequestGoodsMonthByIdVo setId(int Id) {
    this.Id = Id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field Id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SALERID:
      if (value == null) {
        unsetSalerid();
      } else {
        setSalerid((Integer)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SALERID:
      return getSalerid();

    case ID:
      return getId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SALERID:
      return isSetSalerid();
    case ID:
      return isSetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TRequestGoodsMonthByIdVo)
      return this.equals((TRequestGoodsMonthByIdVo)that);
    return false;
  }

  public boolean equals(TRequestGoodsMonthByIdVo that) {
    if (that == null)
      return false;

    boolean this_present_salerid = true && this.isSetSalerid();
    boolean that_present_salerid = true && that.isSetSalerid();
    if (this_present_salerid || that_present_salerid) {
      if (!(this_present_salerid && that_present_salerid))
        return false;
      if (this.salerid != that.salerid)
        return false;
    }

    boolean this_present_Id = true && this.isSetId();
    boolean that_present_Id = true && that.isSetId();
    if (this_present_Id || that_present_Id) {
      if (!(this_present_Id && that_present_Id))
        return false;
      if (this.Id != that.Id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_salerid = true && (isSetSalerid());
    list.add(present_salerid);
    if (present_salerid)
      list.add(salerid);

    boolean present_Id = true && (isSetId());
    list.add(present_Id);
    if (present_Id)
      list.add(Id);

    return list.hashCode();
  }

  @Override
  public int compareTo(TRequestGoodsMonthByIdVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSalerid()).compareTo(other.isSetSalerid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalerid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salerid, other.salerid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Id, other.Id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TRequestGoodsMonthByIdVo(");
    boolean first = true;

    if (isSetSalerid()) {
      sb.append("salerid:");
      sb.append(this.salerid);
      first = false;
    }
    if (isSetId()) {
      if (!first) sb.append(", ");
      sb.append("Id:");
      sb.append(this.Id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRequestGoodsMonthByIdVoStandardSchemeFactory implements SchemeFactory {
    public TRequestGoodsMonthByIdVoStandardScheme getScheme() {
      return new TRequestGoodsMonthByIdVoStandardScheme();
    }
  }

  private static class TRequestGoodsMonthByIdVoStandardScheme extends StandardScheme<TRequestGoodsMonthByIdVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRequestGoodsMonthByIdVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SALERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salerid = iprot.readI32();
              struct.setSaleridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRequestGoodsMonthByIdVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSalerid()) {
        oprot.writeFieldBegin(SALERID_FIELD_DESC);
        oprot.writeI32(struct.salerid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.Id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRequestGoodsMonthByIdVoTupleSchemeFactory implements SchemeFactory {
    public TRequestGoodsMonthByIdVoTupleScheme getScheme() {
      return new TRequestGoodsMonthByIdVoTupleScheme();
    }
  }

  private static class TRequestGoodsMonthByIdVoTupleScheme extends TupleScheme<TRequestGoodsMonthByIdVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRequestGoodsMonthByIdVo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSalerid()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSalerid()) {
        oprot.writeI32(struct.salerid);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.Id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRequestGoodsMonthByIdVo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.salerid = iprot.readI32();
        struct.setSaleridIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Id = iprot.readI32();
        struct.setIdIsSet(true);
      }
    }
  }

}

