/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yjy.apcs.rpc.server.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-06")
public class GoodsMonthReportRpcService {

  public interface Iface {

    public TGoodsMonthPaginationVo findGoodsMonthPagination(TRequestGoodsMonthVo requestGoodsMonthVo) throws org.apache.thrift.TException;

    public TGoodsMonthPaginationVo findGoodsMonthById(TRequestGoodsMonthByIdVo requestGoodsMonthByIdVo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findGoodsMonthPagination(TRequestGoodsMonthVo requestGoodsMonthVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findGoodsMonthById(TRequestGoodsMonthByIdVo requestGoodsMonthByIdVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TGoodsMonthPaginationVo findGoodsMonthPagination(TRequestGoodsMonthVo requestGoodsMonthVo) throws org.apache.thrift.TException
    {
      send_findGoodsMonthPagination(requestGoodsMonthVo);
      return recv_findGoodsMonthPagination();
    }

    public void send_findGoodsMonthPagination(TRequestGoodsMonthVo requestGoodsMonthVo) throws org.apache.thrift.TException
    {
      findGoodsMonthPagination_args args = new findGoodsMonthPagination_args();
      args.setRequestGoodsMonthVo(requestGoodsMonthVo);
      sendBase("findGoodsMonthPagination", args);
    }

    public TGoodsMonthPaginationVo recv_findGoodsMonthPagination() throws org.apache.thrift.TException
    {
      findGoodsMonthPagination_result result = new findGoodsMonthPagination_result();
      receiveBase(result, "findGoodsMonthPagination");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findGoodsMonthPagination failed: unknown result");
    }

    public TGoodsMonthPaginationVo findGoodsMonthById(TRequestGoodsMonthByIdVo requestGoodsMonthByIdVo) throws org.apache.thrift.TException
    {
      send_findGoodsMonthById(requestGoodsMonthByIdVo);
      return recv_findGoodsMonthById();
    }

    public void send_findGoodsMonthById(TRequestGoodsMonthByIdVo requestGoodsMonthByIdVo) throws org.apache.thrift.TException
    {
      findGoodsMonthById_args args = new findGoodsMonthById_args();
      args.setRequestGoodsMonthByIdVo(requestGoodsMonthByIdVo);
      sendBase("findGoodsMonthById", args);
    }

    public TGoodsMonthPaginationVo recv_findGoodsMonthById() throws org.apache.thrift.TException
    {
      findGoodsMonthById_result result = new findGoodsMonthById_result();
      receiveBase(result, "findGoodsMonthById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findGoodsMonthById failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findGoodsMonthPagination(TRequestGoodsMonthVo requestGoodsMonthVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findGoodsMonthPagination_call method_call = new findGoodsMonthPagination_call(requestGoodsMonthVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findGoodsMonthPagination_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TRequestGoodsMonthVo requestGoodsMonthVo;
      public findGoodsMonthPagination_call(TRequestGoodsMonthVo requestGoodsMonthVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestGoodsMonthVo = requestGoodsMonthVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findGoodsMonthPagination", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findGoodsMonthPagination_args args = new findGoodsMonthPagination_args();
        args.setRequestGoodsMonthVo(requestGoodsMonthVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TGoodsMonthPaginationVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findGoodsMonthPagination();
      }
    }

    public void findGoodsMonthById(TRequestGoodsMonthByIdVo requestGoodsMonthByIdVo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findGoodsMonthById_call method_call = new findGoodsMonthById_call(requestGoodsMonthByIdVo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findGoodsMonthById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TRequestGoodsMonthByIdVo requestGoodsMonthByIdVo;
      public findGoodsMonthById_call(TRequestGoodsMonthByIdVo requestGoodsMonthByIdVo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestGoodsMonthByIdVo = requestGoodsMonthByIdVo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findGoodsMonthById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findGoodsMonthById_args args = new findGoodsMonthById_args();
        args.setRequestGoodsMonthByIdVo(requestGoodsMonthByIdVo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TGoodsMonthPaginationVo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findGoodsMonthById();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findGoodsMonthPagination", new findGoodsMonthPagination());
      processMap.put("findGoodsMonthById", new findGoodsMonthById());
      return processMap;
    }

    public static class findGoodsMonthPagination<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findGoodsMonthPagination_args> {
      public findGoodsMonthPagination() {
        super("findGoodsMonthPagination");
      }

      public findGoodsMonthPagination_args getEmptyArgsInstance() {
        return new findGoodsMonthPagination_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findGoodsMonthPagination_result getResult(I iface, findGoodsMonthPagination_args args) throws org.apache.thrift.TException {
        findGoodsMonthPagination_result result = new findGoodsMonthPagination_result();
        result.success = iface.findGoodsMonthPagination(args.requestGoodsMonthVo);
        return result;
      }
    }

    public static class findGoodsMonthById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findGoodsMonthById_args> {
      public findGoodsMonthById() {
        super("findGoodsMonthById");
      }

      public findGoodsMonthById_args getEmptyArgsInstance() {
        return new findGoodsMonthById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findGoodsMonthById_result getResult(I iface, findGoodsMonthById_args args) throws org.apache.thrift.TException {
        findGoodsMonthById_result result = new findGoodsMonthById_result();
        result.success = iface.findGoodsMonthById(args.requestGoodsMonthByIdVo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findGoodsMonthPagination", new findGoodsMonthPagination());
      processMap.put("findGoodsMonthById", new findGoodsMonthById());
      return processMap;
    }

    public static class findGoodsMonthPagination<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findGoodsMonthPagination_args, TGoodsMonthPaginationVo> {
      public findGoodsMonthPagination() {
        super("findGoodsMonthPagination");
      }

      public findGoodsMonthPagination_args getEmptyArgsInstance() {
        return new findGoodsMonthPagination_args();
      }

      public AsyncMethodCallback<TGoodsMonthPaginationVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TGoodsMonthPaginationVo>() { 
          public void onComplete(TGoodsMonthPaginationVo o) {
            findGoodsMonthPagination_result result = new findGoodsMonthPagination_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findGoodsMonthPagination_result result = new findGoodsMonthPagination_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findGoodsMonthPagination_args args, org.apache.thrift.async.AsyncMethodCallback<TGoodsMonthPaginationVo> resultHandler) throws TException {
        iface.findGoodsMonthPagination(args.requestGoodsMonthVo,resultHandler);
      }
    }

    public static class findGoodsMonthById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findGoodsMonthById_args, TGoodsMonthPaginationVo> {
      public findGoodsMonthById() {
        super("findGoodsMonthById");
      }

      public findGoodsMonthById_args getEmptyArgsInstance() {
        return new findGoodsMonthById_args();
      }

      public AsyncMethodCallback<TGoodsMonthPaginationVo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TGoodsMonthPaginationVo>() { 
          public void onComplete(TGoodsMonthPaginationVo o) {
            findGoodsMonthById_result result = new findGoodsMonthById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findGoodsMonthById_result result = new findGoodsMonthById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findGoodsMonthById_args args, org.apache.thrift.async.AsyncMethodCallback<TGoodsMonthPaginationVo> resultHandler) throws TException {
        iface.findGoodsMonthById(args.requestGoodsMonthByIdVo,resultHandler);
      }
    }

  }

  public static class findGoodsMonthPagination_args implements org.apache.thrift.TBase<findGoodsMonthPagination_args, findGoodsMonthPagination_args._Fields>, java.io.Serializable, Cloneable, Comparable<findGoodsMonthPagination_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGoodsMonthPagination_args");

    private static final org.apache.thrift.protocol.TField REQUEST_GOODS_MONTH_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestGoodsMonthVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGoodsMonthPagination_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGoodsMonthPagination_argsTupleSchemeFactory());
    }

    public TRequestGoodsMonthVo requestGoodsMonthVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_GOODS_MONTH_VO((short)1, "requestGoodsMonthVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_GOODS_MONTH_VO
            return REQUEST_GOODS_MONTH_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_GOODS_MONTH_VO, new org.apache.thrift.meta_data.FieldMetaData("requestGoodsMonthVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRequestGoodsMonthVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGoodsMonthPagination_args.class, metaDataMap);
    }

    public findGoodsMonthPagination_args() {
    }

    public findGoodsMonthPagination_args(
      TRequestGoodsMonthVo requestGoodsMonthVo)
    {
      this();
      this.requestGoodsMonthVo = requestGoodsMonthVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGoodsMonthPagination_args(findGoodsMonthPagination_args other) {
      if (other.isSetRequestGoodsMonthVo()) {
        this.requestGoodsMonthVo = new TRequestGoodsMonthVo(other.requestGoodsMonthVo);
      }
    }

    public findGoodsMonthPagination_args deepCopy() {
      return new findGoodsMonthPagination_args(this);
    }

    @Override
    public void clear() {
      this.requestGoodsMonthVo = null;
    }

    public TRequestGoodsMonthVo getRequestGoodsMonthVo() {
      return this.requestGoodsMonthVo;
    }

    public findGoodsMonthPagination_args setRequestGoodsMonthVo(TRequestGoodsMonthVo requestGoodsMonthVo) {
      this.requestGoodsMonthVo = requestGoodsMonthVo;
      return this;
    }

    public void unsetRequestGoodsMonthVo() {
      this.requestGoodsMonthVo = null;
    }

    /** Returns true if field requestGoodsMonthVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestGoodsMonthVo() {
      return this.requestGoodsMonthVo != null;
    }

    public void setRequestGoodsMonthVoIsSet(boolean value) {
      if (!value) {
        this.requestGoodsMonthVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_GOODS_MONTH_VO:
        if (value == null) {
          unsetRequestGoodsMonthVo();
        } else {
          setRequestGoodsMonthVo((TRequestGoodsMonthVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_GOODS_MONTH_VO:
        return getRequestGoodsMonthVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_GOODS_MONTH_VO:
        return isSetRequestGoodsMonthVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGoodsMonthPagination_args)
        return this.equals((findGoodsMonthPagination_args)that);
      return false;
    }

    public boolean equals(findGoodsMonthPagination_args that) {
      if (that == null)
        return false;

      boolean this_present_requestGoodsMonthVo = true && this.isSetRequestGoodsMonthVo();
      boolean that_present_requestGoodsMonthVo = true && that.isSetRequestGoodsMonthVo();
      if (this_present_requestGoodsMonthVo || that_present_requestGoodsMonthVo) {
        if (!(this_present_requestGoodsMonthVo && that_present_requestGoodsMonthVo))
          return false;
        if (!this.requestGoodsMonthVo.equals(that.requestGoodsMonthVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestGoodsMonthVo = true && (isSetRequestGoodsMonthVo());
      list.add(present_requestGoodsMonthVo);
      if (present_requestGoodsMonthVo)
        list.add(requestGoodsMonthVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findGoodsMonthPagination_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestGoodsMonthVo()).compareTo(other.isSetRequestGoodsMonthVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestGoodsMonthVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestGoodsMonthVo, other.requestGoodsMonthVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGoodsMonthPagination_args(");
      boolean first = true;

      sb.append("requestGoodsMonthVo:");
      if (this.requestGoodsMonthVo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestGoodsMonthVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (requestGoodsMonthVo != null) {
        requestGoodsMonthVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGoodsMonthPagination_argsStandardSchemeFactory implements SchemeFactory {
      public findGoodsMonthPagination_argsStandardScheme getScheme() {
        return new findGoodsMonthPagination_argsStandardScheme();
      }
    }

    private static class findGoodsMonthPagination_argsStandardScheme extends StandardScheme<findGoodsMonthPagination_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGoodsMonthPagination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_GOODS_MONTH_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestGoodsMonthVo = new TRequestGoodsMonthVo();
                struct.requestGoodsMonthVo.read(iprot);
                struct.setRequestGoodsMonthVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGoodsMonthPagination_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestGoodsMonthVo != null) {
          oprot.writeFieldBegin(REQUEST_GOODS_MONTH_VO_FIELD_DESC);
          struct.requestGoodsMonthVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGoodsMonthPagination_argsTupleSchemeFactory implements SchemeFactory {
      public findGoodsMonthPagination_argsTupleScheme getScheme() {
        return new findGoodsMonthPagination_argsTupleScheme();
      }
    }

    private static class findGoodsMonthPagination_argsTupleScheme extends TupleScheme<findGoodsMonthPagination_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGoodsMonthPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestGoodsMonthVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestGoodsMonthVo()) {
          struct.requestGoodsMonthVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGoodsMonthPagination_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestGoodsMonthVo = new TRequestGoodsMonthVo();
          struct.requestGoodsMonthVo.read(iprot);
          struct.setRequestGoodsMonthVoIsSet(true);
        }
      }
    }

  }

  public static class findGoodsMonthPagination_result implements org.apache.thrift.TBase<findGoodsMonthPagination_result, findGoodsMonthPagination_result._Fields>, java.io.Serializable, Cloneable, Comparable<findGoodsMonthPagination_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGoodsMonthPagination_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGoodsMonthPagination_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGoodsMonthPagination_resultTupleSchemeFactory());
    }

    public TGoodsMonthPaginationVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGoodsMonthPaginationVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGoodsMonthPagination_result.class, metaDataMap);
    }

    public findGoodsMonthPagination_result() {
    }

    public findGoodsMonthPagination_result(
      TGoodsMonthPaginationVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGoodsMonthPagination_result(findGoodsMonthPagination_result other) {
      if (other.isSetSuccess()) {
        this.success = new TGoodsMonthPaginationVo(other.success);
      }
    }

    public findGoodsMonthPagination_result deepCopy() {
      return new findGoodsMonthPagination_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TGoodsMonthPaginationVo getSuccess() {
      return this.success;
    }

    public findGoodsMonthPagination_result setSuccess(TGoodsMonthPaginationVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TGoodsMonthPaginationVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGoodsMonthPagination_result)
        return this.equals((findGoodsMonthPagination_result)that);
      return false;
    }

    public boolean equals(findGoodsMonthPagination_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findGoodsMonthPagination_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGoodsMonthPagination_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGoodsMonthPagination_resultStandardSchemeFactory implements SchemeFactory {
      public findGoodsMonthPagination_resultStandardScheme getScheme() {
        return new findGoodsMonthPagination_resultStandardScheme();
      }
    }

    private static class findGoodsMonthPagination_resultStandardScheme extends StandardScheme<findGoodsMonthPagination_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGoodsMonthPagination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TGoodsMonthPaginationVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGoodsMonthPagination_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGoodsMonthPagination_resultTupleSchemeFactory implements SchemeFactory {
      public findGoodsMonthPagination_resultTupleScheme getScheme() {
        return new findGoodsMonthPagination_resultTupleScheme();
      }
    }

    private static class findGoodsMonthPagination_resultTupleScheme extends TupleScheme<findGoodsMonthPagination_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGoodsMonthPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGoodsMonthPagination_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TGoodsMonthPaginationVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findGoodsMonthById_args implements org.apache.thrift.TBase<findGoodsMonthById_args, findGoodsMonthById_args._Fields>, java.io.Serializable, Cloneable, Comparable<findGoodsMonthById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGoodsMonthById_args");

    private static final org.apache.thrift.protocol.TField REQUEST_GOODS_MONTH_BY_ID_VO_FIELD_DESC = new org.apache.thrift.protocol.TField("requestGoodsMonthByIdVo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGoodsMonthById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGoodsMonthById_argsTupleSchemeFactory());
    }

    public TRequestGoodsMonthByIdVo requestGoodsMonthByIdVo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_GOODS_MONTH_BY_ID_VO((short)1, "requestGoodsMonthByIdVo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_GOODS_MONTH_BY_ID_VO
            return REQUEST_GOODS_MONTH_BY_ID_VO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_GOODS_MONTH_BY_ID_VO, new org.apache.thrift.meta_data.FieldMetaData("requestGoodsMonthByIdVo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRequestGoodsMonthByIdVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGoodsMonthById_args.class, metaDataMap);
    }

    public findGoodsMonthById_args() {
    }

    public findGoodsMonthById_args(
      TRequestGoodsMonthByIdVo requestGoodsMonthByIdVo)
    {
      this();
      this.requestGoodsMonthByIdVo = requestGoodsMonthByIdVo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGoodsMonthById_args(findGoodsMonthById_args other) {
      if (other.isSetRequestGoodsMonthByIdVo()) {
        this.requestGoodsMonthByIdVo = new TRequestGoodsMonthByIdVo(other.requestGoodsMonthByIdVo);
      }
    }

    public findGoodsMonthById_args deepCopy() {
      return new findGoodsMonthById_args(this);
    }

    @Override
    public void clear() {
      this.requestGoodsMonthByIdVo = null;
    }

    public TRequestGoodsMonthByIdVo getRequestGoodsMonthByIdVo() {
      return this.requestGoodsMonthByIdVo;
    }

    public findGoodsMonthById_args setRequestGoodsMonthByIdVo(TRequestGoodsMonthByIdVo requestGoodsMonthByIdVo) {
      this.requestGoodsMonthByIdVo = requestGoodsMonthByIdVo;
      return this;
    }

    public void unsetRequestGoodsMonthByIdVo() {
      this.requestGoodsMonthByIdVo = null;
    }

    /** Returns true if field requestGoodsMonthByIdVo is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestGoodsMonthByIdVo() {
      return this.requestGoodsMonthByIdVo != null;
    }

    public void setRequestGoodsMonthByIdVoIsSet(boolean value) {
      if (!value) {
        this.requestGoodsMonthByIdVo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_GOODS_MONTH_BY_ID_VO:
        if (value == null) {
          unsetRequestGoodsMonthByIdVo();
        } else {
          setRequestGoodsMonthByIdVo((TRequestGoodsMonthByIdVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_GOODS_MONTH_BY_ID_VO:
        return getRequestGoodsMonthByIdVo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_GOODS_MONTH_BY_ID_VO:
        return isSetRequestGoodsMonthByIdVo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGoodsMonthById_args)
        return this.equals((findGoodsMonthById_args)that);
      return false;
    }

    public boolean equals(findGoodsMonthById_args that) {
      if (that == null)
        return false;

      boolean this_present_requestGoodsMonthByIdVo = true && this.isSetRequestGoodsMonthByIdVo();
      boolean that_present_requestGoodsMonthByIdVo = true && that.isSetRequestGoodsMonthByIdVo();
      if (this_present_requestGoodsMonthByIdVo || that_present_requestGoodsMonthByIdVo) {
        if (!(this_present_requestGoodsMonthByIdVo && that_present_requestGoodsMonthByIdVo))
          return false;
        if (!this.requestGoodsMonthByIdVo.equals(that.requestGoodsMonthByIdVo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestGoodsMonthByIdVo = true && (isSetRequestGoodsMonthByIdVo());
      list.add(present_requestGoodsMonthByIdVo);
      if (present_requestGoodsMonthByIdVo)
        list.add(requestGoodsMonthByIdVo);

      return list.hashCode();
    }

    @Override
    public int compareTo(findGoodsMonthById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestGoodsMonthByIdVo()).compareTo(other.isSetRequestGoodsMonthByIdVo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestGoodsMonthByIdVo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestGoodsMonthByIdVo, other.requestGoodsMonthByIdVo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGoodsMonthById_args(");
      boolean first = true;

      sb.append("requestGoodsMonthByIdVo:");
      if (this.requestGoodsMonthByIdVo == null) {
        sb.append("null");
      } else {
        sb.append(this.requestGoodsMonthByIdVo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (requestGoodsMonthByIdVo != null) {
        requestGoodsMonthByIdVo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGoodsMonthById_argsStandardSchemeFactory implements SchemeFactory {
      public findGoodsMonthById_argsStandardScheme getScheme() {
        return new findGoodsMonthById_argsStandardScheme();
      }
    }

    private static class findGoodsMonthById_argsStandardScheme extends StandardScheme<findGoodsMonthById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGoodsMonthById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_GOODS_MONTH_BY_ID_VO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestGoodsMonthByIdVo = new TRequestGoodsMonthByIdVo();
                struct.requestGoodsMonthByIdVo.read(iprot);
                struct.setRequestGoodsMonthByIdVoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGoodsMonthById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestGoodsMonthByIdVo != null) {
          oprot.writeFieldBegin(REQUEST_GOODS_MONTH_BY_ID_VO_FIELD_DESC);
          struct.requestGoodsMonthByIdVo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGoodsMonthById_argsTupleSchemeFactory implements SchemeFactory {
      public findGoodsMonthById_argsTupleScheme getScheme() {
        return new findGoodsMonthById_argsTupleScheme();
      }
    }

    private static class findGoodsMonthById_argsTupleScheme extends TupleScheme<findGoodsMonthById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGoodsMonthById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestGoodsMonthByIdVo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestGoodsMonthByIdVo()) {
          struct.requestGoodsMonthByIdVo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGoodsMonthById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestGoodsMonthByIdVo = new TRequestGoodsMonthByIdVo();
          struct.requestGoodsMonthByIdVo.read(iprot);
          struct.setRequestGoodsMonthByIdVoIsSet(true);
        }
      }
    }

  }

  public static class findGoodsMonthById_result implements org.apache.thrift.TBase<findGoodsMonthById_result, findGoodsMonthById_result._Fields>, java.io.Serializable, Cloneable, Comparable<findGoodsMonthById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findGoodsMonthById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findGoodsMonthById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findGoodsMonthById_resultTupleSchemeFactory());
    }

    public TGoodsMonthPaginationVo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TGoodsMonthPaginationVo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findGoodsMonthById_result.class, metaDataMap);
    }

    public findGoodsMonthById_result() {
    }

    public findGoodsMonthById_result(
      TGoodsMonthPaginationVo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGoodsMonthById_result(findGoodsMonthById_result other) {
      if (other.isSetSuccess()) {
        this.success = new TGoodsMonthPaginationVo(other.success);
      }
    }

    public findGoodsMonthById_result deepCopy() {
      return new findGoodsMonthById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TGoodsMonthPaginationVo getSuccess() {
      return this.success;
    }

    public findGoodsMonthById_result setSuccess(TGoodsMonthPaginationVo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TGoodsMonthPaginationVo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGoodsMonthById_result)
        return this.equals((findGoodsMonthById_result)that);
      return false;
    }

    public boolean equals(findGoodsMonthById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findGoodsMonthById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findGoodsMonthById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findGoodsMonthById_resultStandardSchemeFactory implements SchemeFactory {
      public findGoodsMonthById_resultStandardScheme getScheme() {
        return new findGoodsMonthById_resultStandardScheme();
      }
    }

    private static class findGoodsMonthById_resultStandardScheme extends StandardScheme<findGoodsMonthById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findGoodsMonthById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TGoodsMonthPaginationVo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findGoodsMonthById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findGoodsMonthById_resultTupleSchemeFactory implements SchemeFactory {
      public findGoodsMonthById_resultTupleScheme getScheme() {
        return new findGoodsMonthById_resultTupleScheme();
      }
    }

    private static class findGoodsMonthById_resultTupleScheme extends TupleScheme<findGoodsMonthById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findGoodsMonthById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findGoodsMonthById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TGoodsMonthPaginationVo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
