/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yjy.apcs.rpc.server.report;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-07-06")
public class TGoodsMonthResponseReport implements org.apache.thrift.TBase<TGoodsMonthResponseReport, TGoodsMonthResponseReport._Fields>, java.io.Serializable, Cloneable, Comparable<TGoodsMonthResponseReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGoodsMonthResponseReport");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CURYEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("curyear", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CURMONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("curmonth", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SALERID_FIELD_DESC = new org.apache.thrift.protocol.TField("salerid", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PREVBALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("prevbalance", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField CUROUTPRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("curoutprice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField CURRECEIPTPRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("curreceiptprice", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField CURREDPRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("curredprice", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField CURBALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("curbalance", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TGoodsMonthResponseReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TGoodsMonthResponseReportTupleSchemeFactory());
  }

  public long id; // optional
  public int curyear; // optional
  public int curmonth; // optional
  public int salerid; // optional
  public double prevbalance; // optional
  public double curoutprice; // optional
  public double curreceiptprice; // optional
  public double curredprice; // optional
  public double curbalance; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CURYEAR((short)2, "curyear"),
    CURMONTH((short)3, "curmonth"),
    SALERID((short)4, "salerid"),
    PREVBALANCE((short)5, "prevbalance"),
    CUROUTPRICE((short)6, "curoutprice"),
    CURRECEIPTPRICE((short)7, "curreceiptprice"),
    CURREDPRICE((short)8, "curredprice"),
    CURBALANCE((short)9, "curbalance");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CURYEAR
          return CURYEAR;
        case 3: // CURMONTH
          return CURMONTH;
        case 4: // SALERID
          return SALERID;
        case 5: // PREVBALANCE
          return PREVBALANCE;
        case 6: // CUROUTPRICE
          return CUROUTPRICE;
        case 7: // CURRECEIPTPRICE
          return CURRECEIPTPRICE;
        case 8: // CURREDPRICE
          return CURREDPRICE;
        case 9: // CURBALANCE
          return CURBALANCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __CURYEAR_ISSET_ID = 1;
  private static final int __CURMONTH_ISSET_ID = 2;
  private static final int __SALERID_ISSET_ID = 3;
  private static final int __PREVBALANCE_ISSET_ID = 4;
  private static final int __CUROUTPRICE_ISSET_ID = 5;
  private static final int __CURRECEIPTPRICE_ISSET_ID = 6;
  private static final int __CURREDPRICE_ISSET_ID = 7;
  private static final int __CURBALANCE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.CURYEAR,_Fields.CURMONTH,_Fields.SALERID,_Fields.PREVBALANCE,_Fields.CUROUTPRICE,_Fields.CURRECEIPTPRICE,_Fields.CURREDPRICE,_Fields.CURBALANCE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CURYEAR, new org.apache.thrift.meta_data.FieldMetaData("curyear", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURMONTH, new org.apache.thrift.meta_data.FieldMetaData("curmonth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SALERID, new org.apache.thrift.meta_data.FieldMetaData("salerid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PREVBALANCE, new org.apache.thrift.meta_data.FieldMetaData("prevbalance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CUROUTPRICE, new org.apache.thrift.meta_data.FieldMetaData("curoutprice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRECEIPTPRICE, new org.apache.thrift.meta_data.FieldMetaData("curreceiptprice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURREDPRICE, new org.apache.thrift.meta_data.FieldMetaData("curredprice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURBALANCE, new org.apache.thrift.meta_data.FieldMetaData("curbalance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGoodsMonthResponseReport.class, metaDataMap);
  }

  public TGoodsMonthResponseReport() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGoodsMonthResponseReport(TGoodsMonthResponseReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.curyear = other.curyear;
    this.curmonth = other.curmonth;
    this.salerid = other.salerid;
    this.prevbalance = other.prevbalance;
    this.curoutprice = other.curoutprice;
    this.curreceiptprice = other.curreceiptprice;
    this.curredprice = other.curredprice;
    this.curbalance = other.curbalance;
  }

  public TGoodsMonthResponseReport deepCopy() {
    return new TGoodsMonthResponseReport(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setCuryearIsSet(false);
    this.curyear = 0;
    setCurmonthIsSet(false);
    this.curmonth = 0;
    setSaleridIsSet(false);
    this.salerid = 0;
    setPrevbalanceIsSet(false);
    this.prevbalance = 0.0;
    setCuroutpriceIsSet(false);
    this.curoutprice = 0.0;
    setCurreceiptpriceIsSet(false);
    this.curreceiptprice = 0.0;
    setCurredpriceIsSet(false);
    this.curredprice = 0.0;
    setCurbalanceIsSet(false);
    this.curbalance = 0.0;
  }

  public long getId() {
    return this.id;
  }

  public TGoodsMonthResponseReport setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getCuryear() {
    return this.curyear;
  }

  public TGoodsMonthResponseReport setCuryear(int curyear) {
    this.curyear = curyear;
    setCuryearIsSet(true);
    return this;
  }

  public void unsetCuryear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURYEAR_ISSET_ID);
  }

  /** Returns true if field curyear is set (has been assigned a value) and false otherwise */
  public boolean isSetCuryear() {
    return EncodingUtils.testBit(__isset_bitfield, __CURYEAR_ISSET_ID);
  }

  public void setCuryearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURYEAR_ISSET_ID, value);
  }

  public int getCurmonth() {
    return this.curmonth;
  }

  public TGoodsMonthResponseReport setCurmonth(int curmonth) {
    this.curmonth = curmonth;
    setCurmonthIsSet(true);
    return this;
  }

  public void unsetCurmonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURMONTH_ISSET_ID);
  }

  /** Returns true if field curmonth is set (has been assigned a value) and false otherwise */
  public boolean isSetCurmonth() {
    return EncodingUtils.testBit(__isset_bitfield, __CURMONTH_ISSET_ID);
  }

  public void setCurmonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURMONTH_ISSET_ID, value);
  }

  public int getSalerid() {
    return this.salerid;
  }

  public TGoodsMonthResponseReport setSalerid(int salerid) {
    this.salerid = salerid;
    setSaleridIsSet(true);
    return this;
  }

  public void unsetSalerid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALERID_ISSET_ID);
  }

  /** Returns true if field salerid is set (has been assigned a value) and false otherwise */
  public boolean isSetSalerid() {
    return EncodingUtils.testBit(__isset_bitfield, __SALERID_ISSET_ID);
  }

  public void setSaleridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALERID_ISSET_ID, value);
  }

  public double getPrevbalance() {
    return this.prevbalance;
  }

  public TGoodsMonthResponseReport setPrevbalance(double prevbalance) {
    this.prevbalance = prevbalance;
    setPrevbalanceIsSet(true);
    return this;
  }

  public void unsetPrevbalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREVBALANCE_ISSET_ID);
  }

  /** Returns true if field prevbalance is set (has been assigned a value) and false otherwise */
  public boolean isSetPrevbalance() {
    return EncodingUtils.testBit(__isset_bitfield, __PREVBALANCE_ISSET_ID);
  }

  public void setPrevbalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREVBALANCE_ISSET_ID, value);
  }

  public double getCuroutprice() {
    return this.curoutprice;
  }

  public TGoodsMonthResponseReport setCuroutprice(double curoutprice) {
    this.curoutprice = curoutprice;
    setCuroutpriceIsSet(true);
    return this;
  }

  public void unsetCuroutprice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUROUTPRICE_ISSET_ID);
  }

  /** Returns true if field curoutprice is set (has been assigned a value) and false otherwise */
  public boolean isSetCuroutprice() {
    return EncodingUtils.testBit(__isset_bitfield, __CUROUTPRICE_ISSET_ID);
  }

  public void setCuroutpriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUROUTPRICE_ISSET_ID, value);
  }

  public double getCurreceiptprice() {
    return this.curreceiptprice;
  }

  public TGoodsMonthResponseReport setCurreceiptprice(double curreceiptprice) {
    this.curreceiptprice = curreceiptprice;
    setCurreceiptpriceIsSet(true);
    return this;
  }

  public void unsetCurreceiptprice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRECEIPTPRICE_ISSET_ID);
  }

  /** Returns true if field curreceiptprice is set (has been assigned a value) and false otherwise */
  public boolean isSetCurreceiptprice() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRECEIPTPRICE_ISSET_ID);
  }

  public void setCurreceiptpriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRECEIPTPRICE_ISSET_ID, value);
  }

  public double getCurredprice() {
    return this.curredprice;
  }

  public TGoodsMonthResponseReport setCurredprice(double curredprice) {
    this.curredprice = curredprice;
    setCurredpriceIsSet(true);
    return this;
  }

  public void unsetCurredprice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURREDPRICE_ISSET_ID);
  }

  /** Returns true if field curredprice is set (has been assigned a value) and false otherwise */
  public boolean isSetCurredprice() {
    return EncodingUtils.testBit(__isset_bitfield, __CURREDPRICE_ISSET_ID);
  }

  public void setCurredpriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURREDPRICE_ISSET_ID, value);
  }

  public double getCurbalance() {
    return this.curbalance;
  }

  public TGoodsMonthResponseReport setCurbalance(double curbalance) {
    this.curbalance = curbalance;
    setCurbalanceIsSet(true);
    return this;
  }

  public void unsetCurbalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURBALANCE_ISSET_ID);
  }

  /** Returns true if field curbalance is set (has been assigned a value) and false otherwise */
  public boolean isSetCurbalance() {
    return EncodingUtils.testBit(__isset_bitfield, __CURBALANCE_ISSET_ID);
  }

  public void setCurbalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURBALANCE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case CURYEAR:
      if (value == null) {
        unsetCuryear();
      } else {
        setCuryear((Integer)value);
      }
      break;

    case CURMONTH:
      if (value == null) {
        unsetCurmonth();
      } else {
        setCurmonth((Integer)value);
      }
      break;

    case SALERID:
      if (value == null) {
        unsetSalerid();
      } else {
        setSalerid((Integer)value);
      }
      break;

    case PREVBALANCE:
      if (value == null) {
        unsetPrevbalance();
      } else {
        setPrevbalance((Double)value);
      }
      break;

    case CUROUTPRICE:
      if (value == null) {
        unsetCuroutprice();
      } else {
        setCuroutprice((Double)value);
      }
      break;

    case CURRECEIPTPRICE:
      if (value == null) {
        unsetCurreceiptprice();
      } else {
        setCurreceiptprice((Double)value);
      }
      break;

    case CURREDPRICE:
      if (value == null) {
        unsetCurredprice();
      } else {
        setCurredprice((Double)value);
      }
      break;

    case CURBALANCE:
      if (value == null) {
        unsetCurbalance();
      } else {
        setCurbalance((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CURYEAR:
      return getCuryear();

    case CURMONTH:
      return getCurmonth();

    case SALERID:
      return getSalerid();

    case PREVBALANCE:
      return getPrevbalance();

    case CUROUTPRICE:
      return getCuroutprice();

    case CURRECEIPTPRICE:
      return getCurreceiptprice();

    case CURREDPRICE:
      return getCurredprice();

    case CURBALANCE:
      return getCurbalance();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CURYEAR:
      return isSetCuryear();
    case CURMONTH:
      return isSetCurmonth();
    case SALERID:
      return isSetSalerid();
    case PREVBALANCE:
      return isSetPrevbalance();
    case CUROUTPRICE:
      return isSetCuroutprice();
    case CURRECEIPTPRICE:
      return isSetCurreceiptprice();
    case CURREDPRICE:
      return isSetCurredprice();
    case CURBALANCE:
      return isSetCurbalance();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TGoodsMonthResponseReport)
      return this.equals((TGoodsMonthResponseReport)that);
    return false;
  }

  public boolean equals(TGoodsMonthResponseReport that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_curyear = true && this.isSetCuryear();
    boolean that_present_curyear = true && that.isSetCuryear();
    if (this_present_curyear || that_present_curyear) {
      if (!(this_present_curyear && that_present_curyear))
        return false;
      if (this.curyear != that.curyear)
        return false;
    }

    boolean this_present_curmonth = true && this.isSetCurmonth();
    boolean that_present_curmonth = true && that.isSetCurmonth();
    if (this_present_curmonth || that_present_curmonth) {
      if (!(this_present_curmonth && that_present_curmonth))
        return false;
      if (this.curmonth != that.curmonth)
        return false;
    }

    boolean this_present_salerid = true && this.isSetSalerid();
    boolean that_present_salerid = true && that.isSetSalerid();
    if (this_present_salerid || that_present_salerid) {
      if (!(this_present_salerid && that_present_salerid))
        return false;
      if (this.salerid != that.salerid)
        return false;
    }

    boolean this_present_prevbalance = true && this.isSetPrevbalance();
    boolean that_present_prevbalance = true && that.isSetPrevbalance();
    if (this_present_prevbalance || that_present_prevbalance) {
      if (!(this_present_prevbalance && that_present_prevbalance))
        return false;
      if (this.prevbalance != that.prevbalance)
        return false;
    }

    boolean this_present_curoutprice = true && this.isSetCuroutprice();
    boolean that_present_curoutprice = true && that.isSetCuroutprice();
    if (this_present_curoutprice || that_present_curoutprice) {
      if (!(this_present_curoutprice && that_present_curoutprice))
        return false;
      if (this.curoutprice != that.curoutprice)
        return false;
    }

    boolean this_present_curreceiptprice = true && this.isSetCurreceiptprice();
    boolean that_present_curreceiptprice = true && that.isSetCurreceiptprice();
    if (this_present_curreceiptprice || that_present_curreceiptprice) {
      if (!(this_present_curreceiptprice && that_present_curreceiptprice))
        return false;
      if (this.curreceiptprice != that.curreceiptprice)
        return false;
    }

    boolean this_present_curredprice = true && this.isSetCurredprice();
    boolean that_present_curredprice = true && that.isSetCurredprice();
    if (this_present_curredprice || that_present_curredprice) {
      if (!(this_present_curredprice && that_present_curredprice))
        return false;
      if (this.curredprice != that.curredprice)
        return false;
    }

    boolean this_present_curbalance = true && this.isSetCurbalance();
    boolean that_present_curbalance = true && that.isSetCurbalance();
    if (this_present_curbalance || that_present_curbalance) {
      if (!(this_present_curbalance && that_present_curbalance))
        return false;
      if (this.curbalance != that.curbalance)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_curyear = true && (isSetCuryear());
    list.add(present_curyear);
    if (present_curyear)
      list.add(curyear);

    boolean present_curmonth = true && (isSetCurmonth());
    list.add(present_curmonth);
    if (present_curmonth)
      list.add(curmonth);

    boolean present_salerid = true && (isSetSalerid());
    list.add(present_salerid);
    if (present_salerid)
      list.add(salerid);

    boolean present_prevbalance = true && (isSetPrevbalance());
    list.add(present_prevbalance);
    if (present_prevbalance)
      list.add(prevbalance);

    boolean present_curoutprice = true && (isSetCuroutprice());
    list.add(present_curoutprice);
    if (present_curoutprice)
      list.add(curoutprice);

    boolean present_curreceiptprice = true && (isSetCurreceiptprice());
    list.add(present_curreceiptprice);
    if (present_curreceiptprice)
      list.add(curreceiptprice);

    boolean present_curredprice = true && (isSetCurredprice());
    list.add(present_curredprice);
    if (present_curredprice)
      list.add(curredprice);

    boolean present_curbalance = true && (isSetCurbalance());
    list.add(present_curbalance);
    if (present_curbalance)
      list.add(curbalance);

    return list.hashCode();
  }

  @Override
  public int compareTo(TGoodsMonthResponseReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCuryear()).compareTo(other.isSetCuryear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCuryear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curyear, other.curyear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurmonth()).compareTo(other.isSetCurmonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurmonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curmonth, other.curmonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalerid()).compareTo(other.isSetSalerid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalerid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salerid, other.salerid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrevbalance()).compareTo(other.isSetPrevbalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrevbalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prevbalance, other.prevbalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCuroutprice()).compareTo(other.isSetCuroutprice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCuroutprice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curoutprice, other.curoutprice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurreceiptprice()).compareTo(other.isSetCurreceiptprice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurreceiptprice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curreceiptprice, other.curreceiptprice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurredprice()).compareTo(other.isSetCurredprice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurredprice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curredprice, other.curredprice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurbalance()).compareTo(other.isSetCurbalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurbalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curbalance, other.curbalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TGoodsMonthResponseReport(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetCuryear()) {
      if (!first) sb.append(", ");
      sb.append("curyear:");
      sb.append(this.curyear);
      first = false;
    }
    if (isSetCurmonth()) {
      if (!first) sb.append(", ");
      sb.append("curmonth:");
      sb.append(this.curmonth);
      first = false;
    }
    if (isSetSalerid()) {
      if (!first) sb.append(", ");
      sb.append("salerid:");
      sb.append(this.salerid);
      first = false;
    }
    if (isSetPrevbalance()) {
      if (!first) sb.append(", ");
      sb.append("prevbalance:");
      sb.append(this.prevbalance);
      first = false;
    }
    if (isSetCuroutprice()) {
      if (!first) sb.append(", ");
      sb.append("curoutprice:");
      sb.append(this.curoutprice);
      first = false;
    }
    if (isSetCurreceiptprice()) {
      if (!first) sb.append(", ");
      sb.append("curreceiptprice:");
      sb.append(this.curreceiptprice);
      first = false;
    }
    if (isSetCurredprice()) {
      if (!first) sb.append(", ");
      sb.append("curredprice:");
      sb.append(this.curredprice);
      first = false;
    }
    if (isSetCurbalance()) {
      if (!first) sb.append(", ");
      sb.append("curbalance:");
      sb.append(this.curbalance);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGoodsMonthResponseReportStandardSchemeFactory implements SchemeFactory {
    public TGoodsMonthResponseReportStandardScheme getScheme() {
      return new TGoodsMonthResponseReportStandardScheme();
    }
  }

  private static class TGoodsMonthResponseReportStandardScheme extends StandardScheme<TGoodsMonthResponseReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TGoodsMonthResponseReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURYEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.curyear = iprot.readI32();
              struct.setCuryearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURMONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.curmonth = iprot.readI32();
              struct.setCurmonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SALERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.salerid = iprot.readI32();
              struct.setSaleridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PREVBALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.prevbalance = iprot.readDouble();
              struct.setPrevbalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CUROUTPRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.curoutprice = iprot.readDouble();
              struct.setCuroutpriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CURRECEIPTPRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.curreceiptprice = iprot.readDouble();
              struct.setCurreceiptpriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CURREDPRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.curredprice = iprot.readDouble();
              struct.setCurredpriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CURBALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.curbalance = iprot.readDouble();
              struct.setCurbalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TGoodsMonthResponseReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCuryear()) {
        oprot.writeFieldBegin(CURYEAR_FIELD_DESC);
        oprot.writeI32(struct.curyear);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurmonth()) {
        oprot.writeFieldBegin(CURMONTH_FIELD_DESC);
        oprot.writeI32(struct.curmonth);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalerid()) {
        oprot.writeFieldBegin(SALERID_FIELD_DESC);
        oprot.writeI32(struct.salerid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrevbalance()) {
        oprot.writeFieldBegin(PREVBALANCE_FIELD_DESC);
        oprot.writeDouble(struct.prevbalance);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCuroutprice()) {
        oprot.writeFieldBegin(CUROUTPRICE_FIELD_DESC);
        oprot.writeDouble(struct.curoutprice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurreceiptprice()) {
        oprot.writeFieldBegin(CURRECEIPTPRICE_FIELD_DESC);
        oprot.writeDouble(struct.curreceiptprice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurredprice()) {
        oprot.writeFieldBegin(CURREDPRICE_FIELD_DESC);
        oprot.writeDouble(struct.curredprice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurbalance()) {
        oprot.writeFieldBegin(CURBALANCE_FIELD_DESC);
        oprot.writeDouble(struct.curbalance);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGoodsMonthResponseReportTupleSchemeFactory implements SchemeFactory {
    public TGoodsMonthResponseReportTupleScheme getScheme() {
      return new TGoodsMonthResponseReportTupleScheme();
    }
  }

  private static class TGoodsMonthResponseReportTupleScheme extends TupleScheme<TGoodsMonthResponseReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGoodsMonthResponseReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCuryear()) {
        optionals.set(1);
      }
      if (struct.isSetCurmonth()) {
        optionals.set(2);
      }
      if (struct.isSetSalerid()) {
        optionals.set(3);
      }
      if (struct.isSetPrevbalance()) {
        optionals.set(4);
      }
      if (struct.isSetCuroutprice()) {
        optionals.set(5);
      }
      if (struct.isSetCurreceiptprice()) {
        optionals.set(6);
      }
      if (struct.isSetCurredprice()) {
        optionals.set(7);
      }
      if (struct.isSetCurbalance()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeI64(struct.id);
      }
      if (struct.isSetCuryear()) {
        oprot.writeI32(struct.curyear);
      }
      if (struct.isSetCurmonth()) {
        oprot.writeI32(struct.curmonth);
      }
      if (struct.isSetSalerid()) {
        oprot.writeI32(struct.salerid);
      }
      if (struct.isSetPrevbalance()) {
        oprot.writeDouble(struct.prevbalance);
      }
      if (struct.isSetCuroutprice()) {
        oprot.writeDouble(struct.curoutprice);
      }
      if (struct.isSetCurreceiptprice()) {
        oprot.writeDouble(struct.curreceiptprice);
      }
      if (struct.isSetCurredprice()) {
        oprot.writeDouble(struct.curredprice);
      }
      if (struct.isSetCurbalance()) {
        oprot.writeDouble(struct.curbalance);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGoodsMonthResponseReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readI64();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.curyear = iprot.readI32();
        struct.setCuryearIsSet(true);
      }
      if (incoming.get(2)) {
        struct.curmonth = iprot.readI32();
        struct.setCurmonthIsSet(true);
      }
      if (incoming.get(3)) {
        struct.salerid = iprot.readI32();
        struct.setSaleridIsSet(true);
      }
      if (incoming.get(4)) {
        struct.prevbalance = iprot.readDouble();
        struct.setPrevbalanceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.curoutprice = iprot.readDouble();
        struct.setCuroutpriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.curreceiptprice = iprot.readDouble();
        struct.setCurreceiptpriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.curredprice = iprot.readDouble();
        struct.setCurredpriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.curbalance = iprot.readDouble();
        struct.setCurbalanceIsSet(true);
      }
    }
  }

}

